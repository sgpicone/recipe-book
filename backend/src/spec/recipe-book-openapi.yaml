openapi: "3.0.0"
info:
  version: 1.0.0
  title: Racipe Book
  description: An API for 
  contact:
    name: Yo mama
    email: yourmom@yourmom.com
    url: http://yourmom.com
  license:
    name: MIT
servers:
  - url: http://localhost:8080/RecipeBook/api/v1
paths:
  /recipes:
    get:
      description: |
        Returns all recipes from the system
      operationId: getRecipes
      parameters:
        - name: tags
          in: query
          description: tags to filter by
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: recipe response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new recipe in the book.  Duplicates should not be allowed
      operationId: addRecipe
      requestBody:
        description: Recipe to add to the book
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewRecipe'
      responses:
        '200':
          description: recipe response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /recipes/{id}:
    get:
      description: Returns a recipe based on a single ID
      operationId: find recipe by id
      parameters:
        - name: id
          in: path
          description: ID of recipe to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: recipe response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: deletes a single recipe based on the ID supplied
      operationId: deleteRecipe
      parameters:
        - name: id
          in: path
          description: ID of recipe to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: recipe deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Recipe:
      allOf:
        - $ref: '#/components/schemas/NewRecipe'
        - required:
          - id
          properties:
            id:
              type: integer
              format: int64

    NewRecipe:
      required:
        - name  
      properties:
        name:
          type: string
        description:
          type: string
        serves:
          type: integer
          format: int32
        servingSize:
          properties:
            qty:
              type: number
              format: float
            unit:
              type: string
        ingredients:
          type: array
          items: 
            $ref: '#/components/schemas/Ingredient'
        method:
          type: array
          items:
            $ref: '#/components/schemas/Step'
        created:
          type: string
        lastModified:
          type: string
          format: date-time
        src:
          type: string
        tags:
          type: array
          items:
            type: string
        links:
          type: array
          items:
            type: string
    
    Ingredient:
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        qty:
          type: number
          format: float
        unit:
          $ref: '#/components/schemas/Unit'
    
    Step:
      properties:
        section:
          type: number
        time:
          properties:
            value: 
              type: number
            unit:
              type: string
              enum:
                - second
                - minute
                - hour
                - day
                - week
                - year
        steps:
          type: array
          items:
            properties:
              number:
                type: integer
                format: int32
              description:
                type: string  

    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string