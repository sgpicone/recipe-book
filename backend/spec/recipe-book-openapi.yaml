openapi: "3.0.0"
info:
  version: 1.0.0
  title: Racipe Book
  description: An API for 
  contact:
    name: Yo mama
    email: yourmom@yourmom.com
    url: http://yourmom.com
  license:
    name: MIT
servers:
  - url: http://localhost:8080/RecipeBook/api/v1
paths:
  /recipes:
    get:
      tags:
        - Recipes
      description: |
        Returns all recipes from the system
      operationId: getRecipes
      parameters:
        - name: tags
          in: query
          description: tags to filter by
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: recipe response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Recipes
      description: Creates a new recipe in the book.  Duplicates should not be allowed
      operationId: addRecipe
      requestBody:
        description: Recipe to add to the book
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewRecipe'
      responses:
        '200':
          description: recipe response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /recipes/{id}:
    get:
      tags:
        - Recipes
      description: Returns a recipe based on a single ID
      operationId: findRecipeById
      parameters:
        - name: id
          in: path
          description: ID of recipe to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: recipe response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Recipes
      description: deletes a single recipe based on the ID supplied
      operationId: deleteRecipe
      parameters:
        - name: id
          in: path
          description: ID of recipe to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: recipe deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /recipes/{recipeId}/logs:
    get:
      tags:
        - Recipe Logs
      description: Get all of the logs for a specific recipe
      operationId: getLogsForRecipe
      parameters:
        - name: recipeId
          in: path
          description: ID of recipe for which logs are to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: recipe log response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipeLog'
        '404':
          description: recipe not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Recipe Logs
      description: Creates a new recipe log in the book.
      operationId: addRecipeLog
      parameters:
        - name: recipeId
          in: path
          description: ID of recipe for which a log will be created
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Recipe Log to add to the book
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewRecipeLog'
      responses:
        '200':
          description: recipe log response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeLog'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /recipes/{recipeId}/logs/{logId}:
    get:
      tags:
        - Recipe Logs
      description: Get a specific log for a specific recipe
      operationId: getLogForRecipeByLogId
      parameters:
        - name: recipeId
          in: path
          description: ID of recipe to which the log belongs
          required: true
          schema:
            type: integer
            format: int64
        - name: logId
          in: path
          description: ID of recipe log to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: recipe log response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeLog'
        '404':
          description: recipe not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Recipe Logs
      description: deletes a single recipe log based on the ID supplied
      operationId: deleteRecipeLog
      parameters:
        - name: recipeId
          in: path
          description: ID of recipe to which the log belongs
          required: true
          schema:
            type: integer
            format: int64
        - name: logId
          in: path
          description: ID of recipe log to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: recipe log deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


components:
  schemas:
    Recipe:
      allOf:
        - $ref: '#/components/schemas/NewRecipe'
        - required:
          - id
          properties:
            id:
              type: integer
              format: int64

    NewRecipe:
      required:
        - name  
      properties:
        name:
          type: string
        description:
          type: string
        serves:
          type: integer
          format: int32
        servingSize:
          $ref: '#/components/schemas/ServingSize'
        ingredients:
          type: array
          items: 
            $ref: '#/components/schemas/Ingredient'
        method:
          type: array
          items:
            $ref: '#/components/schemas/Step'
        created:
          type: string
          format: date-time
        lastModified:
          type: string
          format: date-time
        src:
          type: string
        tags:
          type: array
          items:
            type: string
        links:
          type: array
          items:
            type: string
    
    Ingredient:
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        qty:
          type: number
          format: float
        unit:
          $ref: '#/components/schemas/MeasurementUnit'
    
    Step:
      properties:
        section:
          type: integer
          format: int32
        step-time:
          $ref: '#/components/schemas/StepTime'
        step-details:
          type: array
          items:
            $ref: '#/components/schemas/StepDetails'

    StepDetails:
      properties:
        number:
          type: integer
          format: int32
        description:
          type: string

    StepTime:
      properties:
        value: 
          type: integer
          format: int32
        unit:
          $ref: '#/components/schemas/TimeUnit'

    RecipeLog:
      allOf:
        - $ref: '#/components/schemas/NewRecipeLog'
        - required:
          - id
          properties:
            id:
              type: integer
              format: int64

    NewRecipeLog:
      required:
        - recipeId
        - created
      properties:
        recipeId:
          type: integer
          format: int64
        created:
          type: string
        comments:
          type: array
          items:
            type: string
        adjustments:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string
    
    ServingSize:
      properties:
        qty:
          type: number
          format: float
        unit:
          type: string
    
    MeasurementUnit:
      type: string
      enum:
        - teaspoon
        - tablespoon
        - fluid-ounce
        - cup
        - pint
        - quart
        - gallon
        - milliliter
        - liter
        - deciliter
        - pound
        - ounce
        - milligram
        - gram
        - kilogram
    
    TimeUnit:
      type: string
      enum:
        - second
        - minute
        - hour
        - day
        - week
        - year

    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string